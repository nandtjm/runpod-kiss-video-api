# Final Production Dockerfile - Network Volume Strategy
# Lightweight container that uses pre-loaded models from RunPod Network Volume
# Used by professional AI services: ComfyUI Cloud, Automatic1111, etc.

FROM runpod/pytorch:2.1.0-py3.10-cuda11.8.0-devel-ubuntu22.04

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    wget \
    curl \
    unzip \
    ffmpeg \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    bc \
    && rm -rf /var/lib/apt/lists/*

# Set environment variables for volume-based models
ENV PYTHONPATH=/app
ENV CUDA_HOME=/usr/local/cuda
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
ENV PYTHONUNBUFFERED=1

# Volume-based model paths (models pre-loaded on RunPod Network Volume)
ENV MODEL_CACHE_DIR=/workspace/models
ENV TEMP_DIR=/tmp
ENV HUGGINGFACE_HUB_CACHE=/workspace/models/.cache

# Copy and install Python dependencies
COPY requirements.txt ./
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Install additional dependencies for video processing
RUN pip install opencv-python-headless pillow numpy

# Copy application code
COPY main_final.py ./main.py
COPY rp_handler.py ./

# Create startup script with model validation
RUN echo '#!/bin/bash\n\
echo "üöÄ Starting Kiss Video Generator - Network Volume Strategy"\n\
echo "========================================================"\n\
echo ""\n\
echo "üîç Validating Pre-loaded Models on Volume..."\n\
echo "Volume mount point: $MODEL_CACHE_DIR"\n\
echo ""\n\
\n\
# Check if volume is mounted\n\
if [ ! -d "$MODEL_CACHE_DIR" ]; then\n\
    echo "‚ùå CRITICAL ERROR: Network volume not mounted at $MODEL_CACHE_DIR"\n\
    echo ""\n\
    echo "üîß Solution:"\n\
    echo "1. Ensure RunPod Network Volume exists with pre-loaded models"\n\
    echo "2. Attach volume to serverless endpoint at mount path: /workspace"\n\
    echo "3. Run setup_volume.sh if models not pre-loaded"\n\
    echo ""\n\
    exit 1\n\
fi\n\
\n\
# Check Wan-AI model\n\
WAN_MODEL_PATH="$MODEL_CACHE_DIR/Wan2.1-I2V-14B-720P"\n\
if [ -d "$WAN_MODEL_PATH" ] && [ "$(ls -A $WAN_MODEL_PATH 2>/dev/null)" ]; then\n\
    MODEL_SIZE=$(du -sh "$WAN_MODEL_PATH" 2>/dev/null | cut -f1 || echo "Unknown")\n\
    FILE_COUNT=$(find "$WAN_MODEL_PATH" -type f 2>/dev/null | wc -l || echo "0")\n\
    echo "‚úÖ Wan-AI model found: $MODEL_SIZE, $FILE_COUNT files"\n\
    \n\
    # Verify critical files exist\n\
    if ls "$WAN_MODEL_PATH"/*.safetensors >/dev/null 2>&1 || \\\n\
       ls "$WAN_MODEL_PATH"/*.bin >/dev/null 2>&1 || \\\n\
       ls "$WAN_MODEL_PATH"/*.pth >/dev/null 2>&1; then\n\
        echo "‚úÖ Model weights validated"\n\
    else\n\
        echo "‚ö†Ô∏è  Model directory exists but weight files not found"\n\
    fi\n\
else\n\
    echo "‚ùå CRITICAL ERROR: Wan-AI model NOT found at $WAN_MODEL_PATH"\n\
    echo ""\n\
    echo "üîß Solution:"\n\
    echo "1. Create RunPod Pod with your network volume attached"\n\
    echo "2. Run setup_volume.sh to pre-load models"\n\
    echo "3. Verify models exist: ls -la /workspace/models/"\n\
    echo ""\n\
    exit 1\n\
fi\n\
\n\
# Check LoRA model (optional)\n\
LORA_MODEL_PATH="$MODEL_CACHE_DIR/kissing-lora"\n\
if [ -d "$LORA_MODEL_PATH" ] && [ "$(ls -A $LORA_MODEL_PATH 2>/dev/null)" ]; then\n\
    LORA_SIZE=$(du -sh "$LORA_MODEL_PATH" 2>/dev/null | cut -f1 || echo "Unknown")\n\
    echo "‚úÖ LoRA model found: $LORA_SIZE"\n\
else\n\
    echo "‚ö†Ô∏è  LoRA model not found (optional)"\n\
fi\n\
\n\
echo ""\n\
echo "‚úÖ Model validation complete - all models ready!"\n\
echo "üöÄ Starting API server with pre-loaded models..."\n\
echo "üí° Strategy: Network Volume (Professional)"\n\
echo "‚ö° Cold start: <30 seconds (no downloads needed)"\n\
echo ""\n\
\n\
# Test model loading\n\
python3 -c "from main import health_check; import json; print(json.dumps(health_check(), indent=2))"\n\
\n\
if [ $? -eq 0 ]; then\n\
    echo ""\n\
    echo "üéâ Health check passed - starting RunPod handler"\n\
    python3 rp_handler.py\n\
else\n\
    echo ""\n\
    echo "‚ùå Health check failed - check model setup"\n\
    exit 1\n\
fi\n\
' > /app/start.sh && chmod +x /app/start.sh

# Health check that validates volume models
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD test -d "/workspace/models/Wan2.1-I2V-14B-720P" && \
      python3 -c "from main import health_check; h=health_check(); exit(0 if h['status']=='healthy' else 1)" || exit 1

# Expose port
EXPOSE 8000

# Start with comprehensive model validation
CMD ["/app/start.sh"]